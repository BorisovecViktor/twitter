{"version":3,"sources":["helpers/api.ts","store/posts.ts","store/error.ts","store/loading.ts","store/search.ts","store/favorites.ts","store/navBar.ts","store/widgets.ts","store/index.ts","constants/index.ts","components/Nav/Nav.tsx","components/TweetBox/TweetBox.tsx","components/Comments/Comments.tsx","components/Post/Post.tsx","components/NavBurger/NavBurger.tsx","components/Feed/Feed.tsx","helpers/debounce.ts","components/Widgets/Widgets.tsx","components/Spinner/Spinner.tsx","components/Error/Error.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["fetchPosts","a","fetch","response","json","setPosts","posts","type","reducer","action","post","map","id","comment","postId","comments","unshift","setError","errorMessage","loading","setSearchQuery","field","searchQuery","toLowerCase","trim","favorites","filter","toggleNavBar","isNavBarVisible","isWidgetsVisible","rootReducer","combineReducers","postsReducer","errorReducer","isLoading","loadingReducer","searchReducer","favoritesReducer","navBarVisibleReducer","widgetsVisibleReducer","getFavorites","state","getIsNavBarVisible","getIsWidgetsVisible","getIsLoading","getErrorMessage","loadPosts","dispatch","api","message","getVisiblePosts","text","includes","persistedState","localStorage","getItem","JSON","parse","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","setItem","stringify","getState","headerLinks","Icon","HomeIcon","url","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","avatarImg","currentUser","displayName","userName","verified","avatar","Nav","useSelector","useDispatch","handleCloseNavBar","className","cn","key","exact","activeClassName","to","pathname","onClick","TweetBox","useState","postText","setPostText","postUrl","setPostUrl","errorText","setErrorText","errorUrl","setErrorUrl","onChangeInput","e","target","name","value","onSubmit","preventDefault","length","startsWith","uuidv4","image","Avatar","src","placeholder","maxLength","onChange","Comments","isCommentFieldOpen","setIsCommentFieldOpen","commentText","setCommentText","Post","isAddedToFavorites","some","alt","fontSize","removeFromFavorites","addToFavorites","NavBurger","Feed","history","useHistory","location","useLocation","inputEl","useRef","searchParams","URLSearchParams","search","query","useMemo","get","visibleQuery","setVisibleQuery","useEffect","handleSearchInput","useCallback","func","delay","timeoutId","args","clearTimeout","setTimeout","debounce","set","delete","push","toString","ref","currentTarget","current","focus","toggleWidgets","Widgets","tweetId","sourceType","screenName","options","height","via","Spinner","Error","error","HomePage","NotFoundPage","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c8b960d.chunk.js","sourcesContent":["const API_URL = 'https://borisovecviktor.github.io/twitter/api';\n\nexport const fetchPosts = async (): Promise<Post[]> => {\n  const response = await fetch(`${API_URL}/posts.json`);\n\n  return response.json();\n};\n","import { Action } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst ADD_POST = 'ADD_POST';\nconst ADD_COMMENT = 'ADD_COMMENT';\n\ntype SetPostsAction = Action<typeof SET_POSTS> & {\n  posts: Post[];\n};\n\ntype AddPostAction = Action<typeof ADD_POST> & {\n  post: Post;\n};\n\ntype AddCommentAction = Action<typeof ADD_COMMENT> & {\n  comment: Comments;\n};\n\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, posts });\nexport const addPost = (post: Post) => ({ type: ADD_POST, post });\nexport const addComment = (comment: Comments) => ({ type: ADD_COMMENT, comment });\n\ntype PossibleActions = SetPostsAction | AddPostAction | AddCommentAction;\n\nconst reducer = (posts: Post[] = [], action: PossibleActions) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    case ADD_POST:\n      return [action.post, ...posts];\n\n    case ADD_COMMENT:\n      return posts.map(post => {\n        if (post.id === action.comment.postId) {\n          post.comments.unshift(action.comment);\n        }\n\n        return post;\n      });\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\n\nconst SET_ERROR = 'SET_ERROR';\n\ntype SetErrorAction = Action<typeof SET_ERROR> & {\n  errorMessage: string;\n};\n\nexport const setError = (errorMessage: string) => ({ type: SET_ERROR, errorMessage });\n\ntype PossibleActions = SetErrorAction;\n\nconst reducer = (errorMessage = '', action: PossibleActions) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\ntype SetLoading = Action<typeof START_LOADING | typeof FINISH_LOADING> & {\n  loading: boolean;\n};\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\ntype PossibleActions = SetLoading;\n\nconst reducer = (loading = false, action: PossibleActions) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default: return loading;\n  }\n}\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\ntype SetQueryAction = Action<typeof SET_QUERY> & {\n  field: string;\n};\n\nexport const setSearchQuery = (field: string) => ({ type: SET_QUERY, field });\n\ntype PossibleActions = SetQueryAction;\n\nconst reducer = (searchQuery = '', action: PossibleActions) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return (action.field).toLowerCase().trim();\n\n    default:\n      return searchQuery;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst ADD_FAVORITE = 'ADD_FAVORITE';\nconst REMOVE_FAVORITE = 'REMOVE_FAVORITE';\n\ntype addToFavoritesAction = Action<typeof ADD_FAVORITE> & {\n  post: Post;\n};\n\ntype removeFromFavoritesAction = Action<typeof REMOVE_FAVORITE> & {\n  post: Post;\n};\n\nexport const addToFavorites = (post: Post) => ({\n  type: ADD_FAVORITE,\n  post,\n});\n\nexport const removeFromFavorites = (post: Post) => ({\n  type: REMOVE_FAVORITE,\n  post,\n});\n\ntype PossibleActions = addToFavoritesAction | removeFromFavoritesAction;\n\nconst reducer = (favorites: Post[] = [], action: PossibleActions) => {\n  switch (action.type) {\n    case ADD_FAVORITE:\n      return [...favorites, action.post];\n\n    case REMOVE_FAVORITE:\n      return [...favorites].filter(post => post.id !== action.post.id);\n\n    default:\n      return favorites;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst IS_NAV_BAR_VISIBLE = 'IS_NAV_BAR_VISIBLE';\n\ntype SetNavBarAction = Action<typeof IS_NAV_BAR_VISIBLE> & {\n  isNavBarVisible: boolean;\n}\n\nexport const toggleNavBar = (isNavBarVisible: boolean) => ({\n  type: IS_NAV_BAR_VISIBLE,\n  isNavBarVisible,\n});\n\ntype PossibleActions = SetNavBarAction;\n\nconst reducer = (isNavBarVisible: boolean = false, action: PossibleActions) => {\n  switch (action.type) {\n    case IS_NAV_BAR_VISIBLE:\n      return !action.isNavBarVisible;\n\n    default:\n      return isNavBarVisible;\n  }\n};\n\nexport default reducer;\n","import { Action } from 'redux';\n\nconst IS_WIDGETS_VISIBLE = 'IS_WIDGETS_VISIBLE';\n\ntype SetWidgetsAction = Action<typeof IS_WIDGETS_VISIBLE> & {\n  isWidgetsVisible: boolean;\n}\n\nexport const toggleWidgets = (isWidgetsVisible: boolean) => ({\n  type: IS_WIDGETS_VISIBLE,\n  isWidgetsVisible,\n});\n\ntype PossibleActions = SetWidgetsAction;\n\nconst reducer = (isWidgetsVisible: boolean = false, action: PossibleActions) => {\n  switch (action.type) {\n    case IS_WIDGETS_VISIBLE:\n      return !action.isWidgetsVisible;\n\n    default:\n      return isWidgetsVisible;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\nimport * as api from '../helpers/api';\n\nimport postsReducer, { setPosts } from './posts';\nimport errorReducer, { setError } from './error';\nimport loadingReducer, { startLoading, finishLoading } from './loading';\nimport searchReducer from './search';\nimport favoritesReducer from './favorites';\nimport navBarVisibleReducer from './navBar';\nimport widgetsVisibleReducer from './widgets';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  errorMessage: errorReducer,\n  isLoading: loadingReducer,\n  searchQuery: searchReducer,\n  favorites: favoritesReducer,\n  isNavBarVisible: navBarVisibleReducer,\n  isWidgetsVisible: widgetsVisibleReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getPosts = (state: RootState) => state.posts;\nexport const getFavorites = (state: RootState) => state.favorites;\nexport const getIsNavBarVisible = (state: RootState) => state.isNavBarVisible;\nexport const getIsWidgetsVisible = (state: RootState) => state.isWidgetsVisible;\nexport const getIsLoading = (state: RootState) => state.isLoading;\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(setError(''));\n    dispatch(startLoading());\n\n    try {\n      const posts = await api.fetchPosts();\n\n      dispatch(setPosts(posts));\n      dispatch(finishLoading());\n    } catch (e) {\n      dispatch(setError(e.message));\n      dispatch(finishLoading());\n    }\n  };\n};\n\nexport const getVisiblePosts = (state: RootState) => {\n  let visiblePosts: Post[] = state.posts.filter((post: Post) => {\n    if (state.searchQuery !== '') {\n      return post.text.toLowerCase().includes(state.searchQuery);\n    }\n\n    return post;\n  });\n\n  return visiblePosts;\n}\n\nconst persistedState = localStorage.getItem('rootState')\n  ? JSON.parse(localStorage.getItem('rootState') || '')\n  : {};\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('rootState', JSON.stringify(store.getState()));\n});\n\nexport default store;\n","import HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\nexport const headerLinks: NavLinkType[] = [\n  { text: \"Home\", Icon: HomeIcon, url: '/' },\n  { text: \"Explore\", Icon: SearchIcon, url: '/explore' },\n  { text: \"Notifications\", Icon: NotificationsNoneIcon, url: '/notifications' },\n  { text: \"Messages\", Icon: MailOutlineIcon, url: '/messages' },\n  { text: \"Bookmarks\", Icon: BookmarkBorderIcon, url: '/bookmarks' },\n  { text: \"Lists\", Icon: ListAltIcon, url: '/lists' },\n  { text: \"Profile\", Icon: PermIdentityIcon, url: '/profile' },\n  { text: \"More\", Icon: MoreHorizIcon, url: '/more' },\n];\n\nexport const avatarImg = 'https://gif-avatars.com/img/90x90/barbara-palvin.gif';\n\nexport const currentUser = {\n  displayName: 'Barbara Palvin',\n  userName: 'realbarbarapalvin',\n  verified: true,\n  avatar: avatarImg,\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleNavBar } from '../../store/navBar';\nimport * as store from '../../store';\nimport cn from 'classnames';\nimport './Nav.scss';\n\nimport { headerLinks } from '../../constants/index';\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\n\nconst Nav = () => {\n  const isNavBarVisible = useSelector(store.getIsNavBarVisible);\n  const dispatch = useDispatch();\n\n  const handleCloseNavBar = () => {\n    dispatch(toggleNavBar(isNavBarVisible));\n  }\n\n  return (\n    <nav className={cn(\"nav\", {\n      \"nav--active\": isNavBarVisible\n    })}>\n      <TwitterIcon className=\"nav__twitter-icon\" />\n      <ul className=\"nav__list\">\n        {headerLinks.map(({ text, Icon, url }) => (\n          <li className=\"nav__item\" key={text}>\n            <NavLink\n              className=\"nav__link\"\n              exact={url === '/'}\n              activeClassName=\"nav__link--active\"\n              to={{\n                pathname: url,\n              }}\n              onClick={handleCloseNavBar}\n            >\n              <Icon className=\"nav__icon\" />\n              {text}\n            </NavLink>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport cn from 'classnames';\nimport './TweetBox.scss';\nimport { Avatar } from '@material-ui/core';\nimport { avatarImg, currentUser } from '../../constants';\nimport { addPost } from '../../store/posts';\n\nconst TweetBox = () => {\n  const [postText, setPostText] = useState('');\n  const [postUrl, setPostUrl] = useState('');\n  const [errorText, setErrorText] = useState(false);\n  const [errorUrl, setErrorUrl] = useState(false);\n  const dispatch = useDispatch();\n\n  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorText(false);\n    setErrorUrl(false);\n\n    switch (e.target.name) {\n      case 'post-text': setPostText(e.target.value);\n        break;\n      case 'post-url': setPostUrl(e.target.value);\n        break;\n      default: ;\n    }\n  }\n\n  const handleSubmitNewPost = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (postText.length < 3) {\n      return setErrorText(true);\n    }\n\n    if (postUrl !== '' && !postUrl.startsWith('https://')) {\n      return setErrorUrl(true);\n    }\n\n    dispatch(addPost({\n      ...currentUser,\n      id: uuidv4(),\n      text: postText,\n      image: postUrl,\n      comments: [],\n    }));\n    setPostText('');\n    setPostUrl('');\n  }\n\n  return (\n    <div className=\"tweet-box\">\n      <form action=\"#\" className=\"tweet-box__form\" onSubmit={handleSubmitNewPost}>\n        <div className=\"tweet-box__container\">\n          <Avatar src={avatarImg} />\n          <input\n            type=\"text\"\n            name=\"post-text\"\n            value={postText}\n            className={cn(\"tweet-box__text\", {\n              \"tweet-box__text--error\": errorText\n            })}\n            placeholder=\"What's happening\"\n            maxLength={300}\n            onChange={onChangeInput}\n          />\n          {errorText\n            &&\n            <div className=\"tweet-box__text--error-message\">\n              At least 3 characters\n            </div>\n          }\n        </div>\n        <div className=\"tweet-box__container\">\n          <input\n            type=\"text\"\n            name=\"post-url\"\n            value={postUrl}\n            className={cn(\"tweet-box__text tweet-box__text--url\", {\n              \"tweet-box__url--error\": errorUrl\n            })}\n            placeholder=\"Optional: Enter image URL\"\n            onChange={onChangeInput}\n          />\n          {errorUrl\n            &&\n            <div className=\"tweet-box__url--error-message\">\n              Should start with https://\n          </div>\n          }\n        </div>\n        <button className=\"tweet-box__tweet-button\">Tweet</button>\n      </form>\n    </div>\n  );\n}\n\nexport default TweetBox;\n","import React, { useState } from 'react';\nimport { addComment } from '../../store/posts';\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport cn from 'classnames';\n\nimport './Comments.scss';\n\ntype Props = {\n  id: string;\n  comments: Comments[];\n  isCommentFieldOpen: boolean;\n  setIsCommentFieldOpen: (bool: boolean) => void;\n}\n\nconst Comments: React.FC<Props> = ({\n  id,\n  comments,\n  isCommentFieldOpen,\n  setIsCommentFieldOpen\n}) => {\n  const [errorText, setErrorText] = useState(false);\n  const [commentText, setCommentText] = useState('');\n\n  const dispatch = useDispatch();\n\n  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorText(false);\n    setCommentText(e.target.value);\n  }\n\n  const handleSubmitNewComment = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (commentText.length < 3) {\n      return setErrorText(true);\n    }\n\n    dispatch(addComment({\n      id: uuidv4(),\n      postId: id,\n      text: commentText,\n    }));\n    setCommentText('');\n    setIsCommentFieldOpen(false);\n  }\n\n  return (\n    <div className=\"post__comment comment\">\n      {isCommentFieldOpen\n        &&\n        <form action=\"#\" className=\"comment__form\" onSubmit={handleSubmitNewComment}>\n          <input\n            type=\"text\"\n            name=\"comment-text\"\n            value={commentText}\n            className={cn(\"comment__text\", {\n              \"comment__text--error\": errorText\n            })}\n            placeholder=\"Enter your comment\"\n            maxLength={300}\n            onChange={onChangeInput}\n          />\n          {errorText\n            &&\n            <div className=\"comment__error-message\">\n              At least 3 characters\n              </div>\n          }\n          <button className=\"tweet-box__tweet-button comment__button\">Comment</button>\n        </form>\n      }\n      {comments.length !== 0\n        &&\n        <div className=\"comment__list\">\n          <h2>Comments:</h2>\n          {comments.map(({ id, text }) => (\n            <p key={id} className=\"comment__item\">\n              {text}\n            </p>\n          ))}\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default Comments;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cn from 'classnames';\n\nimport './Post.scss';\n\nimport { Avatar } from '@material-ui/core';\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\n\nimport * as store from '../../store';\nimport { addToFavorites, removeFromFavorites } from '../../store/favorites';\nimport Comment from '../Comments/Comments';\n\ntype Props = {\n  post: Post;\n}\n\nconst Post: React.FC<Props> = ({ post }) => {\n  const { id, displayName, userName, verified, text, image, avatar, comments } = post;\n  const favorites = useSelector(store.getFavorites);\n  const isAddedToFavorites = favorites.some((post: Post) => post.id === id);\n  const [isCommentFieldOpen, setIsCommentFieldOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleToggleCommentField = () => {\n    setIsCommentFieldOpen(!isCommentFieldOpen);\n  }\n\n  const handleToggleFavorite = () => {\n    if (isAddedToFavorites) {\n      dispatch(removeFromFavorites(post));\n    } else {\n      dispatch(addToFavorites(post));\n    }\n  }\n\n  return (\n    <>\n      <div className=\"post__avatar\">\n        <Avatar src={avatar} />\n      </div>\n      <div className=\"post__body\">\n        <div className=\"post__header\">\n          <div className=\"post__header-text\">\n            <span className=\"post__display-name\">\n              {displayName}\n            </span>\n            <span className=\"post__special\">\n              {verified\n                &&\n                <VerifiedUserIcon className=\"post__badge\" />\n              }\n            </span>\n            <span className=\"post__user-name\">\n              {`@${userName}`}\n            </span>\n          </div>\n          <p className=\"post__header-description\">\n            {text}\n          </p>\n        </div>\n        {image\n          &&\n          <div className=\"post__image\">\n            <img className=\"post__picture\" src={image} alt=\"post\" />\n          </div>\n        }\n        <div className=\"post__footer\">\n          <ChatBubbleOutlineIcon\n            className=\"post__icon post__icon--chat\"\n            fontSize=\"small\"\n            onClick={handleToggleCommentField}\n          />\n          <FavoriteBorderIcon\n            className={cn(\"post__icon post__icon--favorite\", {\n              \"post__icon--active\": isAddedToFavorites\n            })}\n            fontSize=\"small\"\n            onClick={handleToggleFavorite}\n          />\n        </div>\n        <Comment\n          id={id} comments={comments}\n          isCommentFieldOpen={isCommentFieldOpen}\n          setIsCommentFieldOpen={setIsCommentFieldOpen}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleNavBar } from '../../store/navBar';\nimport cn from 'classnames';\nimport * as store from '../../store';\n\nimport './NavBurger.scss';\n\nconst NavBurger = () => {\n  const dispatch = useDispatch();\n  const isNavBarVisible = useSelector(store.getIsNavBarVisible);\n\n  const handleToggleNavBar = () => {\n    dispatch(toggleNavBar(isNavBarVisible));\n  }\n\n  return (\n    <button\n      className={cn('feed__burger burger', {\n        'burger--active': isNavBarVisible\n      })}\n      onClick={handleToggleNavBar}\n    >\n      <div className=\"burger__line\"></div>\n      <div className=\"burger__line\"></div>\n      <div className=\"burger__line\"></div>\n    </button>\n  );\n}\n\nexport default NavBurger;\n","import React, { useEffect, useMemo, useState, useCallback, useRef } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { debounce } from '../../helpers/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSearchQuery } from '../../store/search';\nimport { toggleWidgets } from '../../store/widgets';\nimport cn from 'classnames';\n\nimport './Feed.scss';\n\nimport TweetBox from '../TweetBox/TweetBox';\nimport Post from '../Post/Post';\nimport * as store from '../../store';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport WidgetsIcon from '@material-ui/icons/Widgets';\nimport NavBurger from '../NavBurger/NavBurger';\n\nconst Feed = () => {\n  const posts = useSelector(store.getVisiblePosts);\n  const history = useHistory();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const inputEl = useRef<HTMLInputElement>(null);\n  const searchParams = new URLSearchParams(location.search);\n  const query = useMemo(() => searchParams.get('query') || '', [searchParams]);\n  const [visibleQuery, setVisibleQuery] = useState(query);\n  const isWidgetsVisible = useSelector(store.getIsWidgetsVisible);\n\n  useEffect(() => {\n    dispatch(setSearchQuery(query));\n    setVisibleQuery(query);\n  }, [query, dispatch]);\n\n  const handleSearchInput = useCallback(debounce((value: string) => {\n    if (value) {\n      searchParams.set('query', value);\n    } else {\n      searchParams.delete('query');\n    }\n\n    dispatch(setSearchQuery(value));\n    history.push({\n      search: searchParams.toString(),\n    });\n  }, 500), []);\n\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    handleSearchInput(e.currentTarget.value);\n    setVisibleQuery(e.currentTarget.value);\n  }\n\n  const handleClearInputField = () => {\n    setVisibleQuery('');\n    searchParams.delete('query');\n    history.push({\n      search: searchParams.toString(),\n    });\n\n    if (inputEl && inputEl.current) {\n      inputEl.current.focus();\n    }\n  }\n\n  const handleToggleWidgetsVisible = () => {\n    dispatch(toggleWidgets(isWidgetsVisible));\n  }\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feed__header\">\n        <NavBurger />\n        <div className=\"feed__search\">\n          <SearchIcon className=\"feed__search-icon\" />\n          <input\n            type=\"text\"\n            className=\"feed__search-input\"\n            ref={inputEl}\n            value={visibleQuery}\n            placeholder=\"Search Tweet...\"\n            onChange={handleSearchChange}\n          />\n          {query.length > 0\n            &&\n            <button\n              className=\"feed__search-delete\"\n              type=\"button\"\n              onClick={handleClearInputField}\n            >\n            </button>\n          }\n        </div>\n        <WidgetsIcon\n          className={cn(\"feed__widget-icon\", {\n            \"feed__widget-icon--active\": isWidgetsVisible\n          })}\n          onClick={handleToggleWidgetsVisible}\n        />\n      </div>\n      <TweetBox />\n      {posts.map((post: Post) => (\n        <div className=\"post\" key={post.id}>\n          <Post post={post} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Feed;\n","export function debounce(func: (...args: string[]) => void, delay: number) {\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  return (...args: string[]): void => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport cn from 'classnames';\nimport * as store from '../../store';\n\nimport './Widgets.scss';\n\nimport {\n  TwitterTweetEmbed,\n  TwitterTimelineEmbed,\n  TwitterShareButton,\n} from 'react-twitter-embed';\n\nconst Widgets = () => {\n  const isWidgetsVisible = useSelector(store.getIsWidgetsVisible);\n\n  return (\n    <div className={cn(\"widget\", {\n      \"widget--active\": isWidgetsVisible\n    })}>\n      <h2 className=\"widget__title\">What's happening</h2>\n\n      <TwitterTweetEmbed tweetId={\"1159602037232791552\"} />\n\n      <TwitterTimelineEmbed\n        sourceType=\"profile\"\n        screenName=\"reactjs\"\n        options={{ height: 300 }}\n      />\n\n      <TwitterShareButton\n        url={\"https://facebook.com/PalvinBarbie\"}\n        options={{ text: \"#reactjs is awesome\", via: \"PalvinBarbie\" }}\n      />\n    </div>\n  );\n}\n\nexport default Widgets;\n","import React from 'react';\n\nimport './Spinner.scss';\n\nconst Spinner = () => {\n  return (\n    <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n  );\n}\n\nexport default Spinner;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as store from '../../store';\n\nimport './Error.scss';\n\ntype Props = {\n  error: string;\n}\n\nconst Error: React.FC<Props> = ({ error }) => {\n  const dispatch = useDispatch();\n\n  const reloadPosts = () => {\n    dispatch(store.loadPosts());\n  }\n\n  return (\n    <div className=\"error\">\n      <p className=\"error__text\">\n        {error}\n      </p>\n      <Link\n        to=\"/\"\n        className=\"error__link\"\n        onClick={reloadPosts}\n      >\n        Click to try again\n      </Link>\n    </div>\n  );\n}\n\nexport default Error;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport * as store from '../store';\n\nimport './HomePage.scss';\n\nimport Nav from '../components/Nav/Nav';\nimport Feed from '../components/Feed/Feed';\nimport Widgets from '../components/Widgets/Widgets';\nimport Spinner from '../components/Spinner/Spinner';\nimport Error from '../components/Error/Error';\n\nconst HomePage = () => {\n  const error = useSelector(store.getErrorMessage);\n  const loading = useSelector(store.getIsLoading);\n\n  return (\n    <>\n      {error\n        ?\n        <Error error={error} />\n        :\n        <>\n          {loading\n            ?\n            <Spinner />\n            :\n            <div className=\"wrapper\">\n              <Nav />\n              <Feed />\n              <Widgets />\n            </div>\n          }\n        </>\n      }\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport './NotFoundPage.scss';\n\nconst NotFoundPage = () => {\n  const history = useHistory();\n\n  return (\n    <div className=\"notfound\">\n      <div className=\"notfound__message\">\n        <h2 className=\"notfound__message-title\">\n          Oops!\n        </h2>\n        <p className=\"notfound__message-text\">\n          This page is currently not available\n        </p>\n        <button\n          type=\"button\"\n          className=\"notfound__link\"\n          onClick={() => history.push('/')}\n        >\n          Back to Home Page\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import React, { useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport * as store from './store';\n\nimport './App.scss';\n\nimport HomePage from './pages/HomePage';\nimport NotFoundPage from './pages/NotFoundPage';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(store.loadPosts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <main>\n        <div className=\"container\">\n          <Switch>\n            <Route path=\"/\" exact>\n              <HomePage />\n            </Route>\n            <Route component={NotFoundPage} />\n          </Switch>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}